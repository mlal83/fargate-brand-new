name: CI/CD pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: my-java-app1
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init

      - name: Check Terraform Plan
        id: check_plan
        run: |
          terraform plan -input=false -lock=false -no-color \
            -var "image_url=${{ steps.ecr-login.outputs.registry }}/my-java-app1:${{ github.sha }}" \
            -out=tfplan
          echo "::set-output name=has_changes::$(terraform show -json tfplan | jq '.resource_changes | length > 0')"
        continue-on-error: true

      - name: Apply Terraform Changes
        if: steps.check_plan.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

      - name: Skip Terraform Apply (No Changes)
        if: steps.check_plan.outputs.has_changes == 'false'
        run: echo "No Terraform changes to apply"
